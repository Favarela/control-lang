#ifndef _CONTROL_TREE_HPP_
#define _CONTROL_TREE_HPP_

#include <string>


enum class SymbolID
{
    // Terminals
    WHILE_, LPAREN_, RPAREN_, LCURLY_, RCURLY_, IF_, ELSE_,
    REPEAT_, SEMICOL_, PAUSE_, OUTSTRING_, OUTINT_, LCLICK_, RCLICK_,
    LRELEASE_, RRLEASE_, UP_, DOWN_, LEFT_, RIGHT_, PRESSKEY_, RELEASEKEY_,
    ID_, EQASS_, OR_, AND_, EQCOMP_, NE_, LT_, LE_, GT_, GE_, ADD_, SUB_,
    MUL_, DIV_, MOD_, OPP_, INT_, ININT_, MOUSEPOSX_, MOUSEPOSY_,
    INSTRING_, STRING_, STRING_T_, INT_T_,
    
    // Non terminals
    FILE_, STATEMENT_, DEFINITION_, ASSIGNMENT_,
    TYPE_, EXPRESSION_, CONJUNCTION_, EQUALITY_, EQUOP_, RELATION_, RELOP_, ADDITION_,
    ADDOP_, TERM_, MULOP_, FACTOR_, UNARYOP_, PRIMARY_, FUINT_, FUSTRING_, REINT_, RESTRING_
};

enum class SymbolType
{
    TERMINAL, NON_TERMINAL
};

class Symbol
{
public:
    Symbol(SymbolID symbol_ID_, SymbolType symbol_type_) :
        symbol_ID(symbol_ID_), symbol_type(symbol_type_) {};
    Symbol(SymbolID symbol_ID_, SymbolType symbol_type_, std::string init_string) :
        symbol_ID(symbol_ID_), symbol_type(symbol_type_), value(init_string) {};
    Symbol(const Symbol& symbol) :
        symbol_ID(symbol.symbol_ID), symbol_type(symbol.symbol_type),
        value(symbol.value) {};
    SymbolID symbol_ID;
    SymbolType symbol_type;
    std::string value;
};

#endif
