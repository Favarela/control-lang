%{
#include <stdio.h>
#include <cstring>

#include "symbol.hpp"
//#include "y.tab.h"

%}
/* Regular definitions */

delim	[ \t\n]
ws	{delim}+
letter	[a-zA-Z]
digit	[0-9]
word	{letter}({letter}|{digit})*
number	[-+]?{digit}+

%%
{ws}	{/* no action and no return */}
#.*	{/* comments, no action and no return */}
"if"	{return SymbolID::IF;}
"else"	{return SymbolID::ELSE;}
"while"	{return SymbolID::WHILE;}
"pause" {return SymbolID::PAUSE;}
"repeat"	{return SymbolID::REPEAT;}
"outstring"	{return SymbolID::OUTSTRING;}
"outint"	{return SymbolID::OUTINT;}
"lclick"	{return SymbolID::LCLICK;}
"rclick"	{return SymbolID::RCLICK;}
"lrelease"	{return SymbolID::LRELEASE;} 
"rrelease"	{return SymbolID::RRLEASE;} 
"up"	{return SymbolID::UP;} 
"down"	{return SymbolID::DOWN;}
"left"	{return SymbolID::LEFT;} 
"right"	{return SymbolID::RIGHT;} 
"presskey"	{return SymbolID::PRESSKEY;}
"releasekey"	{return SymbolID::RELEASEKEY;}
\{	{return SymbolID::LCURLY;}
\}	{return SymbolID::RCURLY;}
\(	{return SymbolID::LPAREN;}
\)	{return SymbolID::RPAREN;}
\;	{return SymbolID::SEMICOL;}
=	{return SymbolID::EQASS;}
"or"	{return SymbolID::OR;}
"and"	{return SymbolID::AND;}
"=="	{return SymbolID::EQCOMP;}
"!="	{return SymbolID::NE;}
"<"	{return SymbolID::LT;}
"<="	{return SymbolID::LE;}
">"	{return SymbolID::GT;}
">="	{return SymbolID::GE;}
"+"	{return SymbolID::ADD;}
"-"	{return SymbolID::SUB;}
"*"	{return SymbolID::MUL;}
"/"	{return SymbolID::DIV;}
"%"	{return SymbolID::MOD;}
"!"	{return SymbolID::OPP;}
"inint"	{return SymbolID::ININT;}
"mouseposx"	{return SymbolID::MOUSEPOSX;}
"mouseposy"	{return SymbolID::MOUSEPOSY;}
"instring"	{return SymbolID::INSTRING;}
"string"	{return SymbolID::STRING_T;}
"int"	{return SymbolID::INT_T;}

\".*\"	{return SymbolID::STRING;}
{number}	{return SymbolID::INT;}

{word}	{return SymbolID::ID;}
	
%%

int yywrap(void) {
	return 1;
}


int main(void) {
	yylex();
	return 0;
}
